#!/usr/bin/python
import itertools
import magic
import os
import subprocess
import sys
import tempfile
import wave
from fingerprinter import *
from soundmatcher import *

LAME_CMD = "/course/cs4500wc/bin/lame"

CWD = os.getcwd()

valid_opts = ["-d", "-f"]

def error(msg):
    sys.stderr.write("%s\n" % msg)
    sys.exit(-1)

# Print usage information
def usage():
    error("Usage: ./p4500 -f filename -d directoryname ;\
           either argument type can appear in either position.")
    sys.exit(-1)

# Verify the input file exists and is of correct type
def verify_file(filename):
    try:
        # Make sure file exists
        with open(filename) as f:

            # Initialize magic header database
            m = magic.open(magic.MAGIC_NONE)
            m.load()

            # Check if WAV or MP3 file
            header = m.file(filename)
            if("WAVE audio" in header):
                return "WAV"
            if ("MPEG ADTS, layer III" in header or "ID3 version" in header):
                return "MP3"
            
            error("ERROR: File '%s' is not a WAV or MP3 file" % filename)
            sys.exit(-1)

    except IOError:
        error("ERROR: File '%s' not found" % filename)
        sys.exit(-1)

# Parse single file argument
def parse_file(path):
    if not os.path.isfile(path):
        error("ERROR: Path '%s' is not a file" % path)
        sys.exit(-1)

    #verify_file(path)

    return [path]

# Return a set of files to process given a pair of command line arguments
def craft_set(opt, path):
    if opt == "-f":
        return parse_file(path)

    else: # opt == "-d"
        if not os.path.isdir(path):
            error("ERROR: Path '%s' is not a directory" % path)
            sys.exit(-1)

        retset = []

        for name in os.listdir(path):
            retset.extend(parse_file(os.path.join(path, name)))

        return retset

def convert_wave(filename):
    outfd, outfile = tempfile.mkstemp()
    
    return open(filename)
    
    file_type = verify_file(filename)
    
    # Start LAME command line
    command = [LAME_CMD]
    
    # Encode input as mono
    command.extend(["-m", "m"])
    
    # DO SPECIFIC MP3 AND WAVE DECODING HERE
    #if file_type == "MP3":
    #if file_type == "WAVE":

    # 16-bit width
    command.extend(["-b", "16"])
    
    command.extend(["--decode"])

    # Resample
    command.extend(["--resample", "16"])

    # Input file
    command.extend([filename])

    # Output file
    command.extend([outfile])

    # Execute command
    with open(os.devnull, "w") as fnull:
        subprocess.call(command, stdout=fnull, stderr=fnull, cwd=CWD)

    return open(outfile)

# Main routine
def main():
    # Check for the correct number of command line arguments
    if len(sys.argv) != 5:
        usage()

    # Get the opt arguments
    opt1 = sys.argv[1]
    opt2 = sys.argv[3]

    # Check the proper command line options are provided
    if not (opt1 in valid_opts and opt2 in valid_opts):
        usage()

    # Get the path arguments
    path1 = sys.argv[2]
    path2 = sys.argv[4]

    # Craft both input sets
    input_set1 = craft_set(opt1, path1)
    input_set2 = craft_set(opt2, path2)

    # All input files are verified, initialize the real sets
    set1 = []
    set2 = []

    # Convert each input file to canonical WAV form
    for filename in input_set1:
        set1.append((filename, convert_wave(filename)))

    for filename in input_set2:
        set2.append((filename, convert_wave(filename)))

    # Add files to the fingerprint database
    fp = FingerPrinter()

    for filename, wavefile in set1:
        fp.add_fingerprint(filename, wavefile)

    for filename, wavefile in set2:
        if not fp.in_database(filename):
            fp.add_fingerprint(filename, wavefile)

    # Perform the matching operation between files
    sm = SoundMatcher(fp.get_database())

    combinations = itertools.product(set1, set2)
    for test in combinations:
        sm.match(test[0], test[1])

    # Exit the program
    sys.exit(0)

if __name__ == "__main__":
    main()
